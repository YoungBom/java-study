package sec03.exam02;

// 이 예제에서는 공통 기능 제공 + 하위 클래스가 나머지를 구현하도록 강제

public  abstract class Animal {
	public String kind;
	
	
	// 공통 기능 : 모든 동물은 숨을 쉰다.
	public void breathe() {
		System.out.println("숨을 쉽니다.");
	}

	
	// 추상 메소드
	// 미완성 메소드, 실행부(몸통, {})가 없는 메소드
	// 추상 클래스 안에서만 정의 가능
	// 꼭 필요하지만 자식마다 다르게 구현될 것으로 예상되는 경우 사용
	// 동일한 이름으로 구현을 강제하는 효과
	
	//추상 클래스의 용도
	// 1. 설계 규격을 만들고자 할 때
	// 반드시 존재해야 할 공통 필드와 메소드의 선언(특히, 추상 메소드는 구현을 강제할 수 있음)
	// 2. 실체 클래스를 작성할 때 시간 절약
	// 공통된 내용은 물려받고, 추가적인 필드와 메소드만 선언
	// 3. 공통 필드와 메소드의 이름을 통일할 목적
	// 실체 클래스의 설계자가 여러 사람일 경우, 제각기 다른 이름을 가질 수 있음을 방지

	// 정리: 
	// 공통 기능 제공 + 규격 정의
	// 설계 규격을 명확하게 정의하고, 일부 공통 기능까지 제공하고 싶다면 추상 클래스

	// 참고로 인터페이스는 순수한 설계 규격 정의
	// 설계 규격만 정의하고, 다중 구현이 필요 하다면 인터페이스




	public abstract void sound();
	
	
}